# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview
#+TILE: Eglot: Emacs Polyglot - LSP Client
#+LANGUAGE: en

[[https://travis-ci.org/joaotavora/eglot.png?branch=master]]
[[http://melpa.org/#/eglot][http://melpa.org/packages/eglot-badge.svg]]

* M-x Eglot
  Emacs Polyglot. Emacs client to [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] servers.

** Installation and usage

   Eglot requires Emacs 26.1 and is avaiable on [[https://elpa.gnu.org][GNU Elpa]] and [[melpa.org][Melpa]]. Installation is straightforward:

   #+BEGIN_SRC emacs-lisp

   (package-install 'eglot)

   #+END_SRC

   Now find some source file and call Eglot with:  *M-x eglot*

   *That's it*. If you're lucky, Eglot guesses the LSP server executable to start
   for the language of your choice. Otherwise, it prompts you to select one:

   *M-x eglot* can guess and work out-of-the-box with these servers:

   | Language              | Server(s)                             |
   |-----------------------+---------------------------------------|
   | JavaScript/TypeScript | [[https://github.com/sourcegraph/javascript-typescript-langserver][JavaScript/TypeScript language server]] |
   | Python                | [[https://github.com/palantir/python-language-server][Python Language Server]]                |
   | Ruby                  | [[https://github.com/castwide/solargraph][Solargraph]]                            |
   | PHP                   | [[https://github.com/felixfbecker/php-language-server][PHP Language Server]]                   |
   | GNU Bash              | [[https://github.com/mads-hartmann/bash-language-server][Bash Language Server]]                  |
   | C/C++/Object-C        | [[https://github.com/MaskRay/ccls][CCLS]] / [[https://github.com/cquery-project/cquery][CQuery]] / [[https://clang.llvm.org/extra/clangd.html][ClangD]]                |
   | Rust                  | [[https://github.com/rust-lang-nursery/rls][RLS]]                                   |
   | Haskell               | [[https://github.com/haskell/haskell-ide-engine][Haskell IDE Engine (HIE)]]              |
   | Java                  | [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT Language Server]]           |
   | Kotlin                | [[https://github.com/fwcd/KotlinLanguageServer][KotlinLanguageServer]]                  |
   | GoLang                | [[https://github.com/sourcegraph/go-langserver][Go Language Server]]                    |
   | Ocaml                 | [[https://github.com/freebroccolo/ocaml-language-server][Ocaml-Language-Server]]                 |
   | R                     | [[https://cran.r-project.org/package=languageserver][R Language Server]]                     |

   As more server are tested will be added to this list. In the meantime you can customize *eglot-server-programs*:

   #+BEGIN_SRC emacs_lisp

   (add-to-list 'eglot-server-programs '(foo-mode . ("foo-language-server" "--args")))

   #+END_SRC

   Let us know how well it works so we can add it to the list.

   If the server has some quirk or non-conformity, it's possible to extend _Eglot_ to adapt to it.

   Here's how to get [[https://github.com/cquery-project/cquery][CQuery]] working for example:

   #+BEGIN_SRC emacs-lisp

   (add-to-list 'eglot-server-programs '((c++ mode c-mode) . (eglot-cquery "cquery")))

   #+END_SRC

   You can also enter a *server:port* pattern to connect to an LSP server. To skip the guess and always be prompted use _C-u M-x eglot_.

** Connecting automatically

   To start an *Eglot* session automatically as a foo-mode buffer is visited. You can also do:

   #+BEGIN_SRC emacs-lisp

   (add-hook 'foo-mode-hook 'eglot-ensure)

   #+END_SRC

** Connecting via TCP

   The examples above use a _"pipe"_ to talk to the server, which correctly works on Linux and OSX,
   [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Subprocess-hang.html][but may not work on MS Windows]].

   To circumvent this limitation, or if the server doesn't like pipes,
   you can use *C-u M-x eglot* and give it *server:port* pattern to connect to a previously started TCP server serving LSP information.

   If you don't want to start it manually every time, you can configure Eglot to start it and immediately connect to it. Ruby's solargraph server already works this way out-of-the-box.

   For another example, suppose you also wanted start Python's pyls this way:

   #+BEGIN_SRC emacs-lisp

   (add-to-list 'eglot-server-programs
		`(python-mode . ("pyls" "-v" "--tcp" "--host"
				 "localhost" "--port" :autoport)))
   #+END_SRC

   You can see that the element associated with *python-mode* is now a more complicated invocation of the *pyls* program,
   which requests that it be started as a server. Notice the *:autoport* symbol in there: it is replaced dynamically by a local port
   believed to be vacant, so that the ensuing TCP connection finds a listening server.

** Commands and keybindings
   | Command (M-x)                       | Description                                                                                                                                                                                            |
   |-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | eglot                               | Start Eglot.                                                                                                                                                                                           |
   | eglot-reconnect                     | Reconnects to the server.                                                                                                                                                                              |
   | eglot-shutdown                      | Turn off the server.                                                                                                                                                                                   |
   | eglot-rename                        | Ask the server to rename the symbol at point.                                                                                                                                                          |
   | eglot-format                        | Asks the server to format buffer or the active region.                                                                                                                                                 |
   | eglot-code-actions                  | Asks the server for any code actions at  point. These may tipically be simple fixes, like deleting an unused variable, or fixing an import. Left click on diagnostics to check if there are any there. |
   | eglot-help-at-point                 | asks the server for help for symbol at point. *eldoc-mode* messages displayed in the echo area.                                                                                                          |
   | eglot-events-buffer                 | Jumps to the events buffer for debugging  communication with the server.                                                                                                                               |
   | eglot-stderr-buffer                 | if the LSP server is printing useful debugi nformation in stderr, jumps to a buffer with these contents.                                                                                               |
   | eglot-signal-didChangeConfiguration | Updates the LSP server configuration according to the value of the variable eglot-workspace-configuration which you may be set in a *.dir-locals* file, for example.                                     |


   There are *no keybindings* specific to Eglot, but you can bind commands under *eglot-mode-map*,
   which is active as long as Eglot is managing a file in your project.

   The commands don't need to be Eglot-specific:

   #+BEGIN_SRC emacs-lisp

   (define-key eglot-mode-map (kbd "C-c h") 'eglot-help-at-point)
   (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)

   #+END_SRC

** How Eglot do its magic exactly?

   *M-x eglot* starts a server via a shell-command guessed from *eglot-server-programs*,
   using the current major-mode (for whatever language you're programming in) as a hint.

   If the connection is successful, you see an *[eglot:<server>]* indicator pop up in your mode-line.

   More importantly, this means current *and future* file buffers of that major mode
   *inside your current project* automatically become "managed" by the LSP server,
   i.e.  information about their contents is exchanged periodically to provide enhanced code analysis
   via *xref-find-definitions*, *flymake-mode*, *eldoc-mode*, *completion-at-point*, among others.

   To "unmanage" these buffers, shutdown the server with *M-x eglot-shutdown*.
** Supported Protocol features ( LSP 3.6)
*** General

    - [x] initialize

    - [x] initalized

    - [x] shutdown

    - [x] exit

    - [ ] $/cancelRequest
*** Window
     - [x] window/showMessage

     - [x] window/showMessageRequest

     - [x] window/logMessage

     - [x] telemetry/event
*** Client
     - [x] client/registerCapability (but only *workspace/didChangeWatchedFiles*, like RLS asks)

     - [x] client/unregisterCapability  (ditto)
*** Workspace
     - [ ] workspace/workspaceFolders (3.6.0)

     - [ ] workspace/didChangeWorkspaceFolders (3.6.0)

     - [x] workspace/didChangeConfiguration

     - [ ] workspace/configuration (3.6.0)

     - [x] workspace/didChangeWatchedFiles

     - [x] workspace/symbol

     - [x] workspace/executeCommand

     - [x] workspace/applyEdit
*** Text Synchronization
    - [x] textDocument/didOpen

    - [x] textDocument/didChange (incremental or full)

    - [x] textDocument/willSave

    - [x] textDocument/willSaveWaitUntil

    - [x] textDocument/didSave

    - [x] textDocument/didClose
*** Diagnostics
    - [x] textDocument/publishDiagnostics
*** Language features
    - [x] textDocument/completion

    - [x] completionItem/resolve (works quite well with [companymode][companymode])

    - [x] textDocument/hover

    - [x] textDocument/signatureHelp (fancy stuff with Python's [pyls][pyls])

    - [x] textDocument/definition

    - [ ] textDocument/typeDefinition (3.6.0)

    - [ ] textDocument/implementation (3.6.0)

    - [x] textDocument/references

    - [x] textDocument/documentHighlight

    - [x] textDocument/documentSymbol

    - [x] textDocument/codeAction

    - [ ] textDocument/codeLens

    - [ ] codeLens/resolve

    - [ ] textDocument/documentLink

    - [ ] documentLink/resolve

    - [ ] textDocument/documentColor

    - [ ] textDocument/colorPresentation (3.6.0)

    - [x] textDocument/formatting

    - [x] textDocument/rangeFormatting

    - [ ] textDocument/onTypeFormatting

    - [x] textDocument/rename
** Obligatory animated gif section
   [[./gif-examples/eglot-code-actions.gif]]

   [[./gif-examples/eglot-completions.gif]]

   [[./gif-examples/eglot-diagnostics.gif]]

   [[./gif-examples/eglot-hover-on-symbol.gif]]

   [[./gif-examples/eglot-rename.gif]]

   [[./gif-examples/eglot-xref-find-definition.gif]]

   [[./gif-examples/eglot-xref-find-references.gif]]

   [[./gif-examples/eglot-snippets-on-completion.gif]]

** Historical differences to lsp.el

   Around May 2018, I wrote a comparison of Eglot to *lsp.el*, and
   was discussed with its then-maintainer.  That mode has since been
   refactored/rewritten and now [[https://github.com/joaotavora/eglot/issues/180][purports to support]]  a lot of features that differentiated Eglot from it.
   It may now be very different or very similar to Eglot, or even sing with the birds
   in the trees, so [[https://github.com/emacs-lsp/lsp-mode][go check it out]].  That said, here's the original comparison, which I will not be updating any more.

   "Eglot is considerably less code and hassle than lsp-mode.el.  In most
   cases, there's nothing to configure.  It's a minimalist approach
   focused on user experience and performance.

   User-visible differences:

   - The single most visible difference is the friendly entry point *M-x
     eglot*, not *M-x eglot-<language>*.  Also, there are no
     *eglot-<language>* extra packages.

   - There's no "whitelisting" or "blacklisting" directories to
     languages.  *M-x eglot* starts servers to handle file of a major
     mode inside a specific project, using Emacs's built-in *project.el*
     library to discover projects.  Then it automatically detects current
     and future opened files under that project and syncs with server;

   - Easy way to quit/restart a server, just middle/right click on the
     connection name;
   - Pretty interactive mode-line section for live tracking of server
     communication;
   - Automatically restarts frequently crashing servers (like RLS);
   - Slow-to-start servers start asynchronously in the background;
   - Server-initiated edits are confirmed with the user;
   - Diagnostics work out-of-the-box (no *flycheck.el* needed);
   - Smoother/more responsive (read below).

   Under the hood:

   - Message parser is much simpler.
   - Defers signature requests like *textDocument/hover* until server is
     ready.
   - Sends *textDocument/didChange* for groups of edits, not
     one per each tiny change.
   - Easier to read and maintain elisp. Yeah I know, *very subjective*,
     so judge for yourself.
   - Doesn't *require* anything other than Emacs, but will automatically
     upgrade to work with stuff outside Emacs, like *company*,
     *markdown-mode*, if you happen to have these installed.
   - Has automated tests that check against actual LSP servers."

# [lsp]: https://microsoft.github.io/language-server-protocol/
# [rls]: https://github.com/rust-lang-nursery/rls
# [pyls]: https://github.com/palantir/python-language-server
# [gnuelpa]: https://elpa.gnu.org/packages/eglot.html
# [melpa]: http://melpa.org/#/eglot
# [javascript-typescript-langserver]: https://github.com/sourcegraph/javascript-typescript-langserver
# [emacs-lsp]: https://github.com/emacs-lsp/lsp-mode
# [emacs-lsp-plugins]: https://github.com/emacs-lsp
# [bash-language-server]: https://github.com/mads-hartmann/bash-language-server
# [php-language-server]: https://github.com/felixfbecker/php-language-server
# [company-mode]: https://github.com/company-mode/company-mode
# [cquery]: https://github.com/cquery-project/cquery
# [ccls]: https://github.com/MaskRay/ccls
# [clangd]: https://clang.llvm.org/extra/clangd.html
# [solargraph]: https://github.com/castwide/solargraph
# [windows-subprocess-hang]: https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Subprocess-hang.html
# [haskell-ide-engine]: https://github.com/haskell/haskell-ide-engine
# [kotlin-language-server]: https://github.com/fwcd/KotlinLanguageServer
# [go-langserver]: https://github.com/sourcegraph/go-langserver
# [eclipse-jdt]: https://github.com/eclipse/eclipse.jdt.ls
# [ocaml-language-server]: https://github.com/freebroccolo/ocaml-language-server
# [r-languageserver]: https://cran.r-project.org/package=languageserver
